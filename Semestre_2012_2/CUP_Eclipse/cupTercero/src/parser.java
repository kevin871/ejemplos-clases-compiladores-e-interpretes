
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 07 08:58:12 VET 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 07 08:58:12 VET 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\004\010\000\002\002\004\000\002\005" +
    "\003\000\002\005\004\000\002\006\004\000\002\007\005" +
    "\000\002\007\005\000\002\010\003\000\002\010\003\000" +
    "\002\002\003\000\002\002\004\000\002\003\006\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\005\000\002\012\004\000\002\012\005\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\004\020\005\001\002\000\004\002\054\001" +
    "\002\000\004\022\006\001\002\000\004\006\010\001\002" +
    "\000\004\021\024\001\002\000\006\024\013\025\014\001" +
    "\002\000\006\006\010\021\uffff\001\002\000\004\021\ufffe" +
    "\001\002\000\004\006\022\001\002\000\006\027\016\030" +
    "\017\001\002\000\006\006\ufffd\021\ufffd\001\002\000\004" +
    "\026\ufffa\001\002\000\004\026\ufff9\001\002\000\004\026" +
    "\021\001\002\000\006\006\ufffb\021\ufffb\001\002\000\006" +
    "\024\013\025\014\001\002\000\006\006\ufffc\021\ufffc\001" +
    "\002\000\004\006\025\001\002\000\004\016\032\001\002" +
    "\000\004\023\031\001\002\000\006\006\025\023\ufff8\001" +
    "\002\000\004\023\ufff7\001\002\000\004\002\001\001\002" +
    "\000\014\004\037\005\036\006\033\010\034\015\035\001" +
    "\002\000\020\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\026\ufff3\001\002\000\014\004\037\005\036\006" +
    "\033\010\034\015\035\001\002\000\014\004\037\005\036" +
    "\006\033\010\034\015\035\001\002\000\020\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\026\ufff4\001\002" +
    "\000\020\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\026\ufff5\001\002\000\016\007\045\010\041\011\047" +
    "\012\046\013\043\026\042\001\002\000\014\004\uffee\005" +
    "\uffee\006\uffee\010\uffee\015\uffee\001\002\000\006\006\ufff6" +
    "\023\ufff6\001\002\000\014\004\uffeb\005\uffeb\006\uffeb\010" +
    "\uffeb\015\uffeb\001\002\000\014\004\037\005\036\006\033" +
    "\010\034\015\035\001\002\000\014\004\uffef\005\uffef\006" +
    "\uffef\010\uffef\015\uffef\001\002\000\014\004\uffec\005\uffec" +
    "\006\uffec\010\uffec\015\uffec\001\002\000\014\004\uffed\005" +
    "\uffed\006\uffed\010\uffed\015\uffed\001\002\000\020\007\045" +
    "\010\041\011\047\012\046\013\043\014\ufff2\026\ufff2\001" +
    "\002\000\016\007\045\010\041\011\047\012\046\013\043" +
    "\014\052\001\002\000\020\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\026\ufff0\001\002\000\020\007\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\043\014\ufff1\026\ufff1\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\004\004\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\006\006\010\001\001\000\002" +
    "\001\001\000\004\007\014\001\001\000\006\005\011\006" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\022\001\001\000\002\001\001\000\006\002\025\003" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\027\003\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\037\001\001\000\002\001\001\000\004" +
    "\012\052\001\001\000\004\012\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\043\001\001\000\004\011\043\001" +
    "\001\000\002\001\001\000\004\011\043\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	static FileInputStream FInStr = null;
	static String fInName ; //nombre archivo entrada
	public static HashMap hm;
	public static List <String>tmpList;
	
	public static void main(String argv[]) throws Exception
	{
		tmpList = new ArrayList<String>();
		hm = new HashMap<String,ValorIdentificador>();
		
		//Obtención de parámetros pasados en línea de comandos
		if ( argv.length != 1) 
		{ 	//error: nr. Parámetros incorrecto
			System.out.println ("Número parámetros incorrecto!. Uso: ");
			System.out.println ( "\tjava contador archivo.EXT");
			return; 
		}
		else 
		{ 	
			parser analizadorSintactico;
			fInName = argv[0];
			analizadorSintactico = new parser(new Yylex(new FileInputStream(fInName)));
			analizadorSintactico.parse();
		}
		
		Set <String>m = hm.keySet();
		for(String n : m)
		{
			ValorIdentificador vi = (ValorIdentificador) hm.get(n);
			System.out.println(vi.nombre+" "+vi.tipo);
		}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opbinaria ::= POTENCIA 
            {
              String RESULT =null;
		 RESULT="^"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbinaria",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opbinaria ::= MULTI 
            {
              String RESULT =null;
		 RESULT="*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbinaria",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opbinaria ::= DIVI 
            {
              String RESULT =null;
		 RESULT="/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbinaria",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opbinaria ::= RESTA 
            {
              String RESULT =null;
		 RESULT="-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbinaria",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opbinaria ::= SUMA 
            {
              String RESULT =null;
		 RESULT="+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opbinaria",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= PARENTIZQ expresion PARENTDER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT="0";
			  			//e.intValue(); 
			  		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= RESTA expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "0"; 
			  		//e.intValue() * - 1 ; 
			  		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= expresion opbinaria expresion 
            {
              String RESULT =null;
		int eIzqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eIzqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String eIzq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eDerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eDer = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="0";
						/*
						if(op.contentEquals("+"))
						 	RESULT = eIzq.intValue() + eDer.intValue();
						if(op.contentEquals("-"))
						 	RESULT = eIzq.intValue() - eDer.intValue();
						if(op.contentEquals("*"))
							RESULT = eIzq.intValue() * eDer.intValue();
						if(op.contentEquals("/"))
							RESULT = eIzq.intValue() / eDer.intValue();
						if(op.contentEquals("^"))
							RESULT =  (int)  Math.pow(eIzq.intValue(),eDer.intValue());
							*/
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= ID 
            {
              String RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "0";
							// tabla simbolos valor id identificador
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= NUMEROREAL 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "0"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= NUMEROENTERO 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "0"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ecuacion ::= ID IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(v + " OK"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ecuacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sesion ::= ecuacion sesion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sesion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sesion ::= ecuacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sesion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= TIPOENTERO 
            {
              String RESULT =null;
		 RESULT="int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo ::= TIPOREAL 
            {
              String RESULT =null;
		 RESULT="float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista ::= DOSPUNTOS tipo PUNTOYCOMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					for(String s : parser.tmpList)
					{
						ValorIdentificador tmp = (ValorIdentificador) parser.hm.get(s);
						tmp.tipo = t;
					}
					parser.tmpList.clear();	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista ::= COMA ID lista 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			 		parser.hm.put(id,new ValorIdentificador(id));
			 		parser.tmpList.add(id);	
			 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion ::= ID lista 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					parser.hm.put(id,new ValorIdentificador(id));
					parser.tmpList.add(id); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= declaracion declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= codigo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // codigo ::= PROGRAMA VAR declaraciones FINVAR sesion FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

